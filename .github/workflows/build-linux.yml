name: Build Linux

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    name: '${{ matrix.os.id }} (${{ matrix.compiler }})'
    runs-on: ${{ matrix.os.id }}
    strategy:
      matrix:
        os:
          - { id: ubuntu-22.04, name: jammy }
        compiler:
          - 'clang-13'
          - 'clang-14'
          - 'clang-15'
          - 'gcc-10'
          - 'gcc-11'
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          wget https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo apt-key add llvm-snapshot.gpg.key
          rm llvm-snapshot.gpg.key
          sudo apt-add-repository "deb https://apt.llvm.org/${{ matrix.os.name }}/ llvm-toolchain-${{ matrix.os.name }}${CC/#clang/} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
        working-directory: ${{ runner.temp }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          sudo python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      - name: Install
        run: ninja -C build install

  build-coverage-linux:
    if: github.repository == 'mangrove-lang/mangrove'
    name: 'coverage ${{ matrix.os.id }} (${{ matrix.compiler }})'
    runs-on: ${{ matrix.os.id }}
    strategy:
      matrix:
        os:
          - { id: ubuntu-22.04, name: jammy }
        compiler:
          - 'clang-13'
          - 'clang-14'
          - 'clang-15'
          - 'gcc-10'
          - 'gcc-11'
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Coverage environment
        run: |
          echo "BUILD_OPTS=-Db_coverage=true -Db_lto=false --buildtype=debug" >> $GITHUB_ENV
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX gcovr
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "GCOV=${CC/#gcc/gcov}" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          wget https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo apt-key add llvm-snapshot.gpg.key
          rm llvm-snapshot.gpg.key
          sudo apt-add-repository "deb https://apt.llvm.org/${{ matrix.os.name }}/ llvm-toolchain-${{ matrix.os.name }}${CC/#clang/} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX gcovr
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "GCOV=/usr/lib/${CC/#clang/llvm}/bin/llvm-cov gcov" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
        working-directory: ${{ runner.temp }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          sudo python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          $GCOV --version
          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local $BUILD_OPTS
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      # Codecov no longer parses gcov files automatically
      - name: Prepare coverage files
        shell: bash
        run: |
          cd build
          find . -type f -name '*.gcda' -exec $GCOV -p {} + > /dev/null
      - name: Coverage prep
        if: success()
        run: gcovr -r .. -x coverage.xml --gcov-executable "$GCOV" -e ../deps -e ../test
        working-directory: build
      - name: Codecov
        if: success()
        uses: codecov/codecov-action@v3
